name: CI & CD to AWS ECR + EC2

on:
  push:
    branches: [main]
    paths:
      - "Dockerfile"
      - "Cargo.toml"
      - "Cargo.lock"
      - "src/**"
      - "templates/**"
      - "static/**"
      - "i18n/**"
      - .github/workflows/**

env:
  # comunes a todos los jobs
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
  ECR_REPO: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
  BUILD_PLATFORMS: linux/arm64
  CACHE_TAG: buildcache

jobs:
  # 1) BUILD & PUSH -------------------------------------------------------------

  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (binfmt)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.12.1

      - name: Login to Amazon ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: AWS
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Build & Push (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.CACHE_TAG }}
          cache-to: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:${{ env.CACHE_TAG }},mode=max

  ###############################################################################
  # 2) DEPLOY -------------------------------------------------------------------
  ###############################################################################
  deploy:
    name: Deploy to EC2 via SSM
    needs: build
    runs-on: ubuntu-latest
    env:
      CONTAINER_NAME: landing-tvd

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          # role-to-assume: arn:aws:iam::<acct-id>:role/GitHubOIDC (si usas OIDC)

      - name: Pull, stop & run container over SSM
        id: remotecmd
        run: |
          set -e
          run () {
            aws ssm send-command \
              --instance-ids "$EC2_INSTANCE_ID" \
              --document-name "AWS-RunShellScript" \
              --comment "GH‑Actions deploy" \
              --parameters commands="$1" \
              --output text --query "Command.CommandId"
          }

          cmds=$(cat <<'EOS'
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker pull $ECR_REGISTRY/$ECR_REPO:latest
            docker stop landing-tvd || true
            docker rm   landing-tvd || true
            docker run -d --name landing-tvd -p ${EXTERNAL_PORT:-3000}:8080 --restart unless-stopped $ECR_REGISTRY/$ECR_REPO:latest
            docker image prune -f
            EOS
          )

          CMD_ID=$(run "$cmds")
          # Esperar que termine
          aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID"
          STATUS=$(aws ssm get-command-invocation --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID" --query "Status" --output text)
          [ "$STATUS" != "Success" ] && { echo "SSM remote commands failed"; exit 1; }

      - name: Health check
        run: |
          for i in {1..12}; do
            if curl -fs "http://${PUBLIC_IP}:${EXTERNAL_PORT:-3000}/health"; then
              echo "Service healthy ✅"; exit 0
            fi
            echo "waiting ($i/12)…"; sleep 5
          done
          echo "❌ Health check failed"; exit 1
