name: CI-CD

on:
  push:
    branches: [main]
    paths:
      - Dockerfile
      - Cargo.toml
      - Cargo.lock
      - src/**
      - templates/**
      - static/**
      - i18n/**

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ECR_URI: ${{ vars.ECR_URI }}
  IMAGE_TAG: ${{ github.sha }}
  BUILD_PLATFORMS: linux/arm64,linux/amd64

jobs:
  # 1) BUILD & PUSH ###
  build:
    environment: devops_aws
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4
      # ---------- Login to AWS ----------
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # ---------- Setup Buildx + QEMU ----------
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      # ---------- Login en ECR ----------
      - uses: docker/login-action@v3
        with:
          registry: ${{ env.ECR_URI }}
          ecr: true

      # ---------- Buildx + cache ----------
      - uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          provenance: false
          cache-from: type=registry,ref=${{ env.ECR_URI }}:buildcache
          cache-to: type=registry,ref=${{ env.ECR_URI }}:buildcache,mode=max
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: |
            ${{ env.ECR_URI }}:${{ env.IMAGE_TAG }}
            ${{ env.ECR_URI }}:latest

  # 2) DEPLOY ###
  deploy:
    needs: build
    runs-on: ubuntu-22.04
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials via OIDC
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.ROLE_TO_ASSUME }}
          aws-region: ${{ env.AWS_REGION }}

      # ContentReference[oaicite:2]{index=2}
      - name: Pull & restart container via SSM
        uses: peterkimzz/aws-ssm-send-command@v1.1.1
        with:
          region: ${{ env.AWS_REGION }}
          instance_ids: ${{ secrets.EC2_INSTANCE_ID }}
          comment: "Deploy landing_tvd image"
          working_directory: "/home/ubuntu"
          command: |
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_URI
            docker pull $ECR_URI:latest
            docker stop landing_tuvotodecide || true
            docker rm landing_tuvotodecide || true
            docker run -d --name landing_tuvotodecide -p 4000:8080 --restart unless-stopped $ECR_URI:latest
            docker image prune -f || true

      - name: Wait for health‑check
        run: |
          for i in {1..12}; do
            if curl -fs http://$PUBLIC_IP:4000/health; then
              echo "✅ Running"; exit 0
            fi
            echo "retry $i..."; sleep 5
          done
          echo "❌ Health‑check failed" && exit 1
        env:
          PUBLIC_IP: ${{ secrets.STATIC_IP }}
