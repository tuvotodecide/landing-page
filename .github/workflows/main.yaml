name: CI & CD to AWS ECR + EC2

on:
  push:
    branches: [main]
    paths:
      - "Dockerfile"
      - "Cargo.toml"
      - "Cargo.lock"
      - "src/**"
      - "templates/**"
      - "static/**"
      - "i18n/**"
      - .github/workflows/**

env:
  BUILD_PLATFORMS: linux/arm64
  CACHE_TAG: buildcache

jobs:
  # 1) BUILD & PUSH -------------------------------------------------------------
  build:
    name: Build & Push Docker image
    runs-on: ubuntu-latest
    environment: devops_aws # <- secrets de ese environment
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
      ECR_REPO: ${{ vars.ECR_REPOSITORY }}
      IMAGE_TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU (binfmt)
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: image=moby/buildkit:v0.12.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push (with cache)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          platforms: ${{ env.BUILD_PLATFORMS }}
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPO }}:latest
          cache-to: type=inline

  # 2) DEPLOY --------------------------------
# --- DEPLOY ---------------------------------------------------
deploy:
  name: Deploy to EC2 via SSM
  needs: build
  runs-on: ubuntu-latest
  environment: devops_aws
  env:
    AWS_REGION: ${{ vars.AWS_REGION }}
    ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
    ECR_REPO: ${{ vars.ECR_REPOSITORY }}
    EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
    PUBLIC_IP: ${{ secrets.PUBLIC_IP }}
    EXTERNAL_PORT: ${{ vars.EXTERNAL_PORT }}
    CONTAINER_NAME: landing-tvd

  steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy container via SSM
      id: ssm
      shell: bash
      run: |
        set -euo pipefail
        echo "📦 Deploying $ECR_REGISTRY/$ECR_REPO:latest to $EC2_INSTANCE_ID"

        # 1. Construir JSON con comandos ya expandidos
        CMDS=$(jq -nc --arg reg "$ECR_REGISTRY" \
                       --arg repo "$ECR_REPO" \
                       --arg region "$AWS_REGION" \
                       --arg port  "${EXTERNAL_PORT:-3000}" \
                       --arg name  "$CONTAINER_NAME" \
          '
          [
            "aws ecr get-login-password --region \($region) | docker login --username AWS --password-stdin \($reg)",
            "docker pull \($reg)/\($repo):latest",
            "docker stop \($name) || true",
            "docker rm   \($name) || true",
            "docker run -d --name \($name) -p \($port):8080 --restart unless-stopped \($reg)/\($repo):latest",
            "docker image prune -f"
          ]')

        # 2. Enviar comando
        CMD_ID=$(aws ssm send-command \
          --instance-ids "$EC2_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --comment "GitHub Actions deploy" \
          --parameters "commands=$CMDS" \
          --output text \
          --query "Command.CommandId")
        echo "▶️  SSM CommandId = $CMD_ID"

        # 3. Esperar finalización
        aws ssm wait command-executed --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID"

        # 4. Mostrar stdout / stderr del script remoto
        aws ssm get-command-invocation \
          --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID" \
          --query "{Stdout:StandardOutputContent, Stderr:StandardErrorContent, Status:Status}" \
          --output text | sed 's/\\n/\n/g'

        STATUS=$(aws ssm get-command-invocation \
          --command-id "$CMD_ID" --instance-id "$EC2_INSTANCE_ID" \
          --query Status --output text)

        [[ "$STATUS" == "Success" ]] || { echo "❌ Remote script failed"; exit 1; }

    - name: Verify container is running
      run: |
        aws ssm send-command \
          --instance-ids "$EC2_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=docker inspect -f '{{.State.Running}}' $CONTAINER_NAME" \
          --query "Command.CommandId" --output text \
        | xargs -I{} aws ssm wait command-executed --command-id {} --instance-id "$EC2_INSTANCE_ID"

    - name: Health check loop
      run: |
        for i in {1..12}; do
          if curl -fs "http://${PUBLIC_IP}:${EXTERNAL_PORT:-3000}/health"; then
            echo "✅ Service healthy"; exit 0
          fi
          echo "⏳ waiting ($i/12)…"; sleep 5
        done
        echo "❌ Health‑check failed, dumping logs"
        aws ssm send-command \
          --instance-ids "$EC2_INSTANCE_ID" \
          --document-name "AWS-RunShellScript" \
          --parameters "commands=docker logs --tail 200 $CONTAINER_NAME" \
          --query "Command.CommandId" --output text \
        | xargs -I{} aws ssm wait command-executed --command-id {} --instance-id "$EC2_INSTANCE_ID"
        exit 1
